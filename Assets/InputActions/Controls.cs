//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Rumble"",
            ""id"": ""3852636c-781b-46fa-95e5-d1b7a6fb19b2"",
            ""actions"": [
                {
                    ""name"": ""RumbleAction"",
                    ""type"": ""Button"",
                    ""id"": ""c78d55f9-ebb1-4de4-9f64-0f6502ee4f0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e019291d-433d-4057-81a5-d42320edbe33"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""RumbleAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58b27234-a8a6-46a5-943c-7eba7120981b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""RumbleAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""GamePad"",
            ""bindingGroup"": ""GamePad"",
            ""devices"": []
        }
    ]
}");
        // Rumble
        m_Rumble = asset.FindActionMap("Rumble", throwIfNotFound: true);
        m_Rumble_RumbleAction = m_Rumble.FindAction("RumbleAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Rumble
    private readonly InputActionMap m_Rumble;
    private List<IRumbleActions> m_RumbleActionsCallbackInterfaces = new List<IRumbleActions>();
    private readonly InputAction m_Rumble_RumbleAction;
    public struct RumbleActions
    {
        private @Controls m_Wrapper;
        public RumbleActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RumbleAction => m_Wrapper.m_Rumble_RumbleAction;
        public InputActionMap Get() { return m_Wrapper.m_Rumble; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RumbleActions set) { return set.Get(); }
        public void AddCallbacks(IRumbleActions instance)
        {
            if (instance == null || m_Wrapper.m_RumbleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RumbleActionsCallbackInterfaces.Add(instance);
            @RumbleAction.started += instance.OnRumbleAction;
            @RumbleAction.performed += instance.OnRumbleAction;
            @RumbleAction.canceled += instance.OnRumbleAction;
        }

        private void UnregisterCallbacks(IRumbleActions instance)
        {
            @RumbleAction.started -= instance.OnRumbleAction;
            @RumbleAction.performed -= instance.OnRumbleAction;
            @RumbleAction.canceled -= instance.OnRumbleAction;
        }

        public void RemoveCallbacks(IRumbleActions instance)
        {
            if (m_Wrapper.m_RumbleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRumbleActions instance)
        {
            foreach (var item in m_Wrapper.m_RumbleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RumbleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RumbleActions @Rumble => new RumbleActions(this);
    private int m_GamePadSchemeIndex = -1;
    public InputControlScheme GamePadScheme
    {
        get
        {
            if (m_GamePadSchemeIndex == -1) m_GamePadSchemeIndex = asset.FindControlSchemeIndex("GamePad");
            return asset.controlSchemes[m_GamePadSchemeIndex];
        }
    }
    public interface IRumbleActions
    {
        void OnRumbleAction(InputAction.CallbackContext context);
    }
}
